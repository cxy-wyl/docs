import{_ as e,o as t,c as a,a5 as n}from"./chunks/framework.DnJ-_PtE.js";const f=JSON.parse('{"title":"1","description":"","frontmatter":{},"headers":[],"relativePath":"common/nginx.md","filePath":"common/nginx.md","lastUpdated":1717410010000}'),o={name:"common/nginx.md"},r=n('<h1 id="_1" tabindex="-1">1 <a class="header-anchor" href="#_1" aria-label="Permalink to &quot;1&quot;">​</a></h1><p>Apache</p><ol><li>Nginx (重点推荐)，针对于 Nginx 来说，你至少需要掌握两点 1.单页应用的部署 2.反向代理 / 跨域处理 云概念（个人认为：云概念是未来的主要方式），云概念至少需要掌握以下 5 点： 1.云服务器 1.标准 ECS 云服务器 2.应用云服务器 2.云数据库 1.SQL 型 2.NO SQL 型 3.云存储服务 1.OSS：对象存储 2.NAS：文件存储 4.ServerLess：无服务结构（小程序云开发是一个很好的切入点） 5.CDN 服务</li></ol><h2 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h2><p>start nginx nginx -s stop快速停止 nginx -s quit完整有序的停止 nginx -s reload配置文件修改重装载命令 nginx -t验证配置是否正确 nginx -V查看Nginx的版本号 tasklist /fi &quot;imagename eq nginx.exe&quot;查看nginx相关进程，有2个进程：命令进程和应用进程 taskkill /f /t /im nginx.exe杀死进程</p><p>常用配置</p><p>conf/nginx.conf中添加include servers/*.conf conf/新建servers文件夹 server{}</p><p>代理配置</p><p>server {</p><p>监听端口</p><p>listen 80; , server_name需要配置否则会访问到外网 server_name localhost;</p><p>location / { #被代理的地方 proxy_pass <a href="http://192.168.24.175:3000/" target="_blank" rel="noreferrer">http://192.168.24.175:3000/</a>; #代理之后host被修改，为了使服务器收到原始的host, 方便区分，可能有多个host代理到同一个地方。 proxy_set_header Host $host; }</p><p>}</p><p>缓存配置</p><p>proxy_cache_path /tmp/nginx-cache levels=1:2 keys_zone=test-cache:1m max_size=10g inactive=60m use_temp_path=off; server { listen 8000; server_name localhost;</p><p>location / { # 将proxy_cache命令到server部分，将缓存应用到所有的那些location中未指定自己的proxy_cache命令的服务中。 proxy_cache test-cache; proxy_pass <a href="http://192.168.24.175:3000/" target="_blank" rel="noreferrer">http://192.168.24.175:3000/</a>; proxy_set_header Host $host; }</p><p>}</p><p>proxy_cache_path 设置缓存数据存放的路径 levels 路径下设置两级层次结构的目录。levels默认单个目录，大量文件放单个目录中导致文件访问缓慢，推荐用两级目录结构。 keys_zone 设置共享内存区，用于存缓存键和元数据，类似计时器。将键的拷贝放入内存可以使NGINX在不检索磁盘的情况下快速决定一个请求是HIT还是MISS，提高检索速度。1MB内存可存约8000个key。 max_size 设置缓存上限（10G）。可选；默认允许缓存不断增长，占用所有可用磁盘空间。缓存达到上线，处理器便调用cache manager移除最近最少使用的文件，把缓存空间降低至限制之下。 inactive 指定项目不被访问的情况下能在内存中保持的时间。默认10分钟（10m），文件10分钟之内没被请求，则缓存管理会自动将其在内存删除，不管文件是否过期。注意，非活动内容有别于过期内容。NGINX不会自动删除由缓存控制头部指定的过期内容（本例中Cache-Control:max-age=120）。过期内容只有在inactive指定时间内没有被访问的情况下才会被删除。如果过期内容被访问了，那么NGINX就会将其从原服务器上刷新，并更新对应的inactive计时器。 use_temp_path=off NGINX最初会将注定写入缓存的文件先放入临时存储区域， use_temp_path=off指示NGINX将在缓存这些文件时将它们写入同一个目录下。建议设为off避免文件系统中不必要的数据拷贝。use_temp_path在NGINX1.7版本和NGINX Plus R6中有所介绍。 proxy_cache test-cache; 将proxy_cache命令到server部分。</p>',18),s=[r];function p(c,i,_,h,l,x){return t(),a("div",null,s)}const d=e(o,[["render",p]]);export{f as __pageData,d as default};
