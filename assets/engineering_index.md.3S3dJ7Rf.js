import{_ as t,o as n,c as a,j as e,a as i}from"./chunks/framework.DnJ-_PtE.js";const B=JSON.parse('{"title":"工程化","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/index.md","filePath":"engineering/index.md","lastUpdated":1718107892000}'),l={name:"engineering/index.md"},o=e("h1",{id:"工程化",tabindex:"-1"},[i("工程化 "),e("a",{class:"header-anchor",href:"#工程化","aria-label":'Permalink to "工程化"'},"​")],-1),s=e("p",null,"你的代码提交到 Git ，那么这个 Git 平台是怎么搭建的？ 你的代码提交，如果不合规（死链或者代码格式不合规），如何避免被提交？ 代码部署这种重复的工作如何自动化？ 新版本上线如何最大程度的减轻 BUG 出现导致大面积崩溃的风险？ 如果真的出现了大面的崩溃，如何快速的返回上一个稳定版本？工程化代表的应该是一整套前端从开发到上线的全流程。目前的工程化以自动工程化为主。也就是说你的开发、测试、部署等等，全部都自动化。",-1),r=e("p",null,"这一整套的自动化工程，就可以称为是一套 工程化技术。 在很多的中小公司中，工程化的流程并不规范，存在非常多的问题。这点对大家来说，应该是一个好事情，如果你熟练地掌握了 工程化技术，那么你就会拥有更多的 技术资本 。 工程化技术方面，简单的给大家进行一下列举： 1.代码托管平台搭建 1.Gitlab 2.自动化工具 1）合规检测 1.ESLint 提交检测 2.兼容性检测 3.死链检测 2）自动化测试 3）自动化部署",-1),d=e("ol",null,[e("li",null,"CI：持续集成"),e("li",null,"CD：持续部署 3.产品迭代方面"),e("li",null,"灰度发布"),e("li",null,"A/B 测试")],-1),c=[o,s,r,d];function _(p,h,u,m,f,x){return n(),a("div",null,c)}const G=t(l,[["render",_]]);export{B as __pageData,G as default};
