import{_ as t,o as a,c as s,j as e,a as o}from"./chunks/framework.DnJ-_PtE.js";const j=JSON.parse('{"title":"ES6","description":"","frontmatter":{},"headers":[],"relativePath":"language/js/es6.md","filePath":"language/js/es6.md","lastUpdated":1717744154000}'),l={name:"language/js/es6.md"},n=e("h1",{id:"es6",tabindex:"-1"},[o("ES6 "),e("a",{class:"header-anchor",href:"#es6","aria-label":'Permalink to "ES6"'},"​")],-1),c=e("p",null,"解构赋值 解构数组 左侧的变量名和右侧数组中的元素一一对应 let [a, b, c] = [1, 2, 3] console.log(a) // 1 console.log(b) // 2 console.log(c) // 3 给左边数组中的变量设置默认值 let [a = 1, b = 2] = [5] console.log(a) // 5 console.log(b) // 2 交换两个变量 let a = 1 let b = 2 // 不使用解构交换 let c = a a = b b = c // 使用解构交换 [ (a, b) ] = [b, a] console.log(a) // 2 console.log(b) // 1 解析函数返回值 function foo() { return [1, 2] }",-1),r=e("p",{"b:":"","2,":"","c:":"",3:""},"let [a, b] = foo() console.log(a) // 1 console.log(b) // 2 忽略掉某些值 let [a, , , b] = [1, 2, 3, 4] console.log(a) // 1 console.log(b) // 4 将剩余部分的数组赋值给一个变量 let [a, ...b] = [1, 2, 3] console.log(a) // 1 console.log(b) // [2, 3] 解构对象 基本语法 let object = { a: 1, b: 2, c: 3 } let { a, b } = object console.log(a) // 1 console.log(b) // 2 从一个对象中提取变量并赋值给和属性名不同的新变量名 let object = { a: 1, b: 2, c: 3 } let { a: aa, b: bb } = object console.log(aa) // 1 console.log(bb) // 2 指定默认值 let object = { a: 5 } let { a = 1, b = 2 } = object console.log(a) // 5 console.log(b) // 2 从函数参数对象中提取数据 function test(user) {console.log(user.id, user.name) } let user = {id: 1,name: 'test',} test(user) function test({ id, name }) { console.log(id, name) } let user = { id: 1, name: 'test', } test(user) 将剩余部分的对象赋值给一个变量 let { a, ...b } = { a: 1, b: 2, c: 3 } console.log(a) // 1 console.log(b) //",-1),b=e("p",null,[o("ES6 "),e("a",{href:"https://es6.ruanyifeng.com/",target:"_blank",rel:"noreferrer"},"https://es6.ruanyifeng.com/"),o(' 变量声明 let const 局部变量、块级作用域 作用域 块级作用域，不再需要立即执行函数表达式，循环体中的闭包不再有问题 数据类型 Symbol、Bigint， Symbol通过typeof 检测 数据结构 Map对key的类型无要求、Set唯一性 解构赋值 对象 let { bar, foo } = { foo: "aaa", bar: "bbb" }; ...扩展运算符 对象：可遍历属性 函数参数：rest逆运算，调用函数传入的实参用可以将实参数组转为参数序列，函数本身形参 数组：每次展开一层数组，数组拼接，复制 字符串：["hello"]字符串转数组 Number isFinite检查数值是否有限、isNaN()、isInteger()是否整数、 String ${}模板语法、includes、startsWith、endsWith、repeat重复输出、for of遍历字符串有了遍历器接口、padStart & padEnd字符串填充 Array新方法 new Set(...arr)、Array.from()、 find、 findindex、flat、flatMap()对返回的值flat 函数 默认参数function func( num = 12 ){}、 ...rest获取函数多余参数代替arguments、 箭头函数 面向对象编程 class代替constructor 模块化编程 import export、as重命名、考虑到兼容性，开发中用 babel编译 解决异步回调问题 promise、async await是Generator语法糖、Generator状态机 Object Object.is()、Object.assign()合并对象、Object.entries数组方式返回key value proxy、Reflect 拦截对象 Promise Math Math.sign()是否整数、Math.trunc()去除小数 遍历 for of')],-1),i=[n,c,r,b];function g(d,f,u,p,m,h){return a(),s("div",null,i)}const y=t(l,[["render",g]]);export{j as __pageData,y as default};
