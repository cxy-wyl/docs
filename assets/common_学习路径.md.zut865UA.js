import{_ as e,o as n,c as o,a5 as t}from"./chunks/framework.DnJ-_PtE.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"common/学习路径.md","filePath":"common/学习路径.md","lastUpdated":1717756482000}'),w={name:"common/学习路径.md"},d=t('<p>unix/linux设计哲学 Computer Science入门指南</p><p>概述</p><p>计算机科学与技术本科课程</p><table><thead><tr><th>学科分类</th><th>必修课</th><th>辅修</th><th>了解前沿</th></tr></thead><tbody><tr><td>数学、物理</td><td>高数+线代+概率论，离散数学+计算方法+大学物理</td><td>C++，数据结构+软件工程，Java，C#，Linux</td><td>计算机科学导论/前沿介绍/职业道德（略）</td></tr><tr><td></td><td>计算机组成原理+体系结构（高级）</td><td>数据库</td><td>计算机图形学+图像处理与分析</td></tr><tr><td></td><td>汇编语言+编译原理+操作系统</td><td></td><td>计算机视觉+数据可视化+模式识别</td></tr><tr><td></td><td>计算机网络</td><td></td><td>人工智能+智能优化技术</td></tr><tr><td></td><td>计算机接口+数字逻辑+电工与电子技术（略）</td><td></td><td>信息安全概论+软件测试</td></tr><tr><td></td><td></td><td></td><td>大数据技术基础</td></tr></tbody></table><p>图解计算机科学视频总结</p><p>图解计算机科学</p><p>● 计算机基础理论</p><p>○ 图灵机包括： 一条无限长被分割的小格来记录符号(0 1)的纸带：内存 一个能对纸带进行符号读写的读写头：CPU 一个储存读写头状态的寄存器 一个记录所有可能指令的列表：存在计算机存储空间里 是计算机科学的基石，</p><p>计算机还有其他部件：</p><p>硬盘：持久化存储数据</p><p>输入输出设备、运行在硬件上的软件 图灵机可计算的所有问题都用Lambda演算法计算，它是研究编程语言的基础。也是函数式编程的起源。 可计算理论试图区分什么可计算什么不可计算，许多理论问题可计算可解但需要花费他多内存和时间，计算复杂性试图用这些问题的规模来归类它们。但是有许多不同等级的复杂度，不同复杂度的问题也有不同类型。 所以，产生算法，算法就是为了解决一个特定问题，创造出一系列和硬件或者编程语言无关的指令，类似于菜谱，并且不断改进达到最好的效果。每个算法都能达到最终效果，但有些算法会更高效(更少的内存 更短地时间)。——有了算法复杂度的概念（数据结构） ○ 信息理论0101 ■ 研究信息的性质，衡量方法，如何存储以及通讯 ■ 应用之一：如何尽可能的压缩数据？在保留大部分信息的同时占用更少的存储资源 ■ 编码理论、密码学、保证数据安全 ● 计算机工程 ○ CPU ■ 同一时间要执行许多不同事物时，CPU需要在多个任务之间来回切换，可以保证每个任务都能在合理的时间内完成。——有了程序调度（操作系统） ■ 程序调度：选择什么时候做什么，以最有效的方式组织所有任务 ■ 多核技术：可以提高速度，多核CPU能并行执行多个任务，同时使调度程序变得更复杂 ○ 计算机体系结构 ■ 研究如何设计处理器完成任务，不同的架构擅长执行不同的任务 ■ CPU通用目的，GPU图像优化，FPGA可以被编程从而高效完成特定任务 ■ 和硬件打交道的编程语言：汇编语言最接近硬件 ○ 基础硬件上层的软件 ■ 用各式各样的程序编写一系列指令（这些指令要通过一种或几种编译器（编译原理）转为CPU指令），告诉计算机做什么 ■ 最重要的：设计程序语言+编译器（易用，功能多） ○ 操作系统 ■ 和计算机交互的接口，同时管理其他所有运行在硬件上的程序。很难：要有组织的编写指令，所以有了软件工程 ○ 软件工程 ■ 有组织的编写指令，告诉计算机该做什么，构建优秀的软件。 ■ 把想法转换成某种语言下的逻辑指令，而且要正确高效。学习一些设计理念 ○ 让计算机通讯并且协同工作（计算机网络）来解决各类难题，存储和检索海量数据。 ○ 黑客技术：安全方面 ● 计算机应用 ○ 为了确定计算机系统在特定任务种执行情况，绘制逼真图 ○ 最优化问题 ○ 人工智能 ○ 计算机扩展大脑，增强了感官，计算机前沿正在发展一种可以独立思考的计算机系统：人工智能 ○ 人工智能的研究方向： ■ 机器学习：发展技术和算法，使计算机能从大量数据中学习，然后用所学到的东西做有用的事情，比如：决策、对事物进行分类 ● 机器视觉：像人一样，在图像中利用图像处理技术，使计算机可以看到物体 ● 自然语言处理：使计算机能理解人类的语言并沟通，帮助分析处理大批量文本信息 ● 知识图谱：意思相近的次会聚集在一起 机器学习的算法能得到改进，是因为有大量的数据 ○ 大数据 ■ 如何管理分析数据并从中获取价值 ○ 计算机科学与技术使用计算机来帮助解答科学问题，从基础物理到神经科学。或者在模拟运算领域常见的超级计算 ○ 人机交互技术 ■ 研究如何设计好计算机系统：虚拟现实，增强现实，远程增强。取代人类对现实的体验。 ■ 最后机器人给与了计算机物理实体，从扫地机器人到像人类一样聪明的机器 ■ 有一天，我们成了计算机？ ● how to computers read code？<a href="https://search.bilibili.com/all?keyword=how" target="_blank" rel="noreferrer">https://search.bilibili.com/all?keyword=how</a> to computers read code &amp;from_source=webtop_search&amp;spm_id_from=333.788 编译器处于人类可读代码和计算机可读代码之间，程序员写的高级编程语言通过编译器被翻译成计算机能读懂的机器语言，也就是0101代码这一串指令，为了让处理器处理，形成一个二进制文件。一个程序表示成一连串的二进制指令也就是机器语言。CPU上存取这些0101数据，对其进行操作。计算机底层CPU处理器只能做一些小事情，读取内存的数据并计算。为什么CPU能处理这些二进制文件？因为硬件上处理器已经有执行这些指令的电路，只有把对的指令送到CPU处理器中，这些电路才能被正确连接。指令中0101会控制某些小灯泡开关，使其正确连接电路并执行。高级语言也称为源代码。编译器是怎么把源代码文本转为一串二进制指令的？（编译原理）由编译器决定在内存中哪里存入变量 如果编译后的程序再复制到另外一个计算机上，可能不能运行，操作系统不同对应的机器语言不同，可以选择将程序编译成该计算机操作系统的机器码。比如：用户可能运行在不同的操作系统平台上</p><p>JAVA在解决以上问题，将代码换成JAVAC，再送到其他平台上可以通过那个平台的编译器转换为当前适合的机器码</p><p>创造编译器的过程就是编译的一部分</p><p>有关计算机科学的系统视频教程系列（有时间再看）</p><p>● 视频教程（系列） ○ CCCS ■ 计算机科学速成课 - bilibili(opens new window) ○ CS50 ■ CS50 2019 ● 哈佛公开课 CS50 2019 - David J. Malan【九集全】【中英字幕】(opens new window) ■ CS50 Walkthroughs 2019 ● 哈佛公开课 CS50 Walkthroughs 2019 【演练讲解】【中英字幕】(opens new window) ■ CS50 Shorts ● 哈佛公开课 CS50 Shorts - Doug Bloyd【短片 50】【中英字幕】(opens new window) ■ CS50 Beyond 2019 ● 哈佛公开课 CS50 Beyond 2019【网页前端开发】【中英字幕】(opens new window) ■ CS50&#39;s Web Programming with Python and JavaScript ● [双字]CS50&#39;s Web Programming with Python and JavaScript(opens new window) ■ CS50 2018 ● CS50 Lectures 2018 - bilibili(opens new window) ■ CS50&#39;s Understanding Technology 2017 ● 计算机入门 - CS50 - 理解技术 - David J. Malan 【六集全】【中英字幕】(opens new window) ● 知识体系 ○ [译] Coding Interview University 一套完整的学习手册帮助自己准备 Google 的面试(opens new window) ○ 系统设计入门(opens new window) ○ Teach Yourself Computer Science ■ Teach Yourself Computer Science(opens new window) ■ 自学计算机科学(opens new window) ○ MIT Challenge(opens new window) ● 进阶书籍 ○ 深入理解计算机系统 (opens new window)（CSAPP） ○ 计算机程序的构造和解释 (opens new window)（SICP）</p><p>中国高校 CS 课程体系（有时间再看）</p><p>● 顶尖中文大学计算机专业课程体系 - 网易云课堂(opens new window) ● 清华大学计算机系课程攻略(opens new window) ● 北京大学信息学院计算机系 本科&amp;研究生课程大作业选集(opens new window) ● libpku - 贵校课程资料民间整理(opens new window) ● 上海交通大学课程分享(opens new window) ● 浙江大学课程攻略共享计划(opens new window) ● 中国科学技术大学课程资源(opens new window)</p><p>编程资料</p><p>● Teach Yourself Programming in Ten Years ○ Teach Yourself Programming in Ten Years(opens new window) ○ [十年学会编程(opens new window)](</p><p>为什么要学习？</p><p>个人成长／正能量 | 湾区日报 (wanqu.co)</p><p>学了就会，不学就不会。实在学不会，考虑和别人合作，发挥各自优势。</p><p>学习方法论：如何学习？</p><p>● 关于学习 ○ 如何学习？一门很好的课程<a href="https://www.coursera.org/learn/learning-how-to-learn" target="_blank" rel="noreferrer">https://www.coursera.org/learn/learning-how-to-learn</a> ○ 兴趣、勤奋、不懂就问、自信、今日事今日毕、合理安排时间和内容、夯实基础，稳步前进 ● CCSS自学教程 ○ Crash Course Study Skills - YouTube(opens new window) ○ 学习技能 - bilibili(opens new window) ○ 学习技能总结 ■ 记笔记和阅读 ● 大纲法，康奈尔法，思维导图 ● 圆点标记主要概念结论，横杠标记解释上述结论的观点 ● 学会主动阅读：SQ3R：浏览 提问 阅读 复述 复习 ● 平常在纸上写，总结的时候写在平板上，最后周天做思维导图 ■ 记忆（再认、回忆） ● 大脑更容易捕捉有形的，视觉的，不寻常的信息 ● 间隔重复知识，不要对每个知识花费同样的间隔时间 ○ 莱特纳系统：五个盒子。1 3 5 10 end会的知识依次往后放，后面只要有不会的就放入第一个盒子 ■ 注意力与集中、拖延症、锻炼身体 ● 每天健康饮食、sleep7h+ 、 sport1h+ ● 开始做事之前 ○ 适当运动提高心率 ○ 将task分为几个小任务、使用计时器提高紧迫感 ○ 简化工作环境提高实际专注力（大脑无法同时做两件事） ● 可以允许自己享受高密度娱乐，拒绝低密度短时间娱乐 ● 扩展阅读 方法论 ○ 费曼学习法(opens new window) ○ 艾宾浩斯记忆法(opens new window) ○ 刻意训练(opens new window) ○ 每月高效工作 200 小时 / Environment Body Mind(opens new window) ○ 任务换人有害无益 - Joel 说软件(opens new window) ○ X-Y PROBLEM(opens new window) ○ 提问的智慧(opens new window)</p><p>Learn X in Y minutes(opens new window)</p><p>我如何零基础转行成为一个自信的前端</p><p>MarkDown学习指南</p><p>● 自学资料 ○ Mastering Markdown(opens new window) ○ Markdown Cheatsheet(opens new window) ○ Markdown - Learn X in Y minutes(opens new window) ● VSCode里一些插件 ○ Markdown 插件：Markdown All in One(opens new window) ○ 语法高亮：Dracula(opens new window) ○ 格式化：Prettier</p>',28),p=[d];function r(i,a,s,l,h,c){return n(),o("div",null,p)}const S=e(w,[["render",r]]);export{m as __pageData,S as default};
