import{_ as t,o as e,c as s,a5 as a}from"./chunks/framework.DnJ-_PtE.js";const m=JSON.parse('{"title":"vue基础","description":"","frontmatter":{},"headers":[],"relativePath":"pc/vue/index.md","filePath":"pc/vue/index.md","lastUpdated":1718107892000}'),i={name:"pc/vue/index.md"},d=a(`<h1 id="vue基础" tabindex="-1">vue基础 <a class="header-anchor" href="#vue基础" aria-label="Permalink to &quot;vue基础&quot;">​</a></h1><h2 id="vue-优缺点" tabindex="-1">Vue 优缺点 <a class="header-anchor" href="#vue-优缺点" aria-label="Permalink to &quot;Vue 优缺点&quot;">​</a></h2><p>轻量几十KB，只关注viewmodel，只改viewmodel就能自动双向数据绑定，内部帮我们更新dom且用vdom+diff算法+队列机制减少dom操作 优点： 1、数据驱动视图，对真实 dom 进行抽象出 virtual dom（本质就是一个 js 对象），并配合 diff 算法、响应式和观察者、异步队列等手段以最小代价更新 dom，渲染页面 2、组件化，组件用单文件的形式进行代码的组织编写，使得我们可以在一个文件里编写 html\\css（scoped 属性配置 css 隔离）\\js 并且配合 Vue-loader 之后，支持更强大的预处理器等功能 3、强大且丰富的 API 提供一系列的 api 能满足业务开发中各类需求 4、由于采用虚拟 dom，让 Vue ssr 先天就足 5、生命周期钩子函数，选项式的代码组织方式，写熟了还是蛮顺畅的，但仍然 有优化空间（Vue3 composition-api） 6、生态好，社区活跃 缺点： 1、由于底层基于 Object.defineProperty 实现响应式，而这个 api 本身不支持 IE8 及以下浏览器 2、csr 的先天不足，首屏性能问题（白屏） 3、由于百度等搜索引擎爬虫无法爬取 js 中的内容，故 spa 先天就对 seo 优化心有余力不足（谷歌的 puppeteer 就挺牛逼的，实现预渲染底层也是用到了这个工具）</p><h2 id="vue-性能优化" tabindex="-1">Vue 性能优化 <a class="header-anchor" href="#vue-性能优化" aria-label="Permalink to &quot;Vue 性能优化&quot;">​</a></h2><p>npm run build --report 大文件定位 编码 ● 减少 data 中数据，data 中数据会增加 getter 和 setter，收集对应的 watcher ● v-if 和 v-for 不能连用，如果要用 v-for 给每项元素绑定事件时使用事件代理，尽量v-if 替代 v-show ● SPA 页面采用 keep-alive 缓存组件 ● key 保证唯一性不用index ● 用路由懒加载按需加载、异步组件 ● 防抖、节流 ● 三方模块按需导入 UI库 ● 长列表滚动到可视区域动态加载，图片懒加载 （2）SEO 优化 ● 预渲染，服务端渲染 SSR （3）打包优化 ● 压缩代码 Gzip ● Tree Shaking/Scope Hoisting ● cdn 加载第三方模块 代替npm ● 多线程打包 happypack ● splitChunks 抽离公共文件 ● sourceMap 优化 （4）用户体验 ● 骨架屏，PWA，用缓存(客户端缓存、服务端缓存)优化、服务端开启 gzip 压缩。</p><p>vue如何优化首屏加载速度？</p><ol><li>将引用的外部s,css文件剥离开来，不编译到vendorjs中，而是用资源的形式引用，这样浏 览器可以使用多个线程异步将vendoris,外部的s等加载下来，达到加速首开的目的。</li><li>外部库文件，可以使用cdn资源，或者别的服务器资源等,用文档的cdn文件代替npm安装包</li><li>大文件定位：我们可以使用webpack可视化插件webpackbundleanalyzer查看工程s 文件大小，然后有目的的解决过大的j文件。</li><li>路由按需加载</li><li>将s文件引入方式放在body的最后</li><li>ui库的按需加数：一般u库都提供按需加载的方法，按照文档即可配置</li><li>开启gzip压缩在confa/indexjs设置productiongzip为true,开启gzip压缩</li></ol><h2 id="vue2和vue3使用区别" tabindex="-1">vue2和vue3使用区别 <a class="header-anchor" href="#vue2和vue3使用区别" aria-label="Permalink to &quot;vue2和vue3使用区别&quot;">​</a></h2><p>createapp，emits属性，生命周期，多事件@click=&quot;one($event),two($event)&quot;，Fragment, 移除.sync, 异步组件，移除filter用computer代替， Teleport组件放到外层，Suspense插槽实现异步组件，Compositionapi</p><table><thead><tr><th>区别</th><th>Vue2</th><th>Vue3</th></tr></thead><tbody><tr><td>生命周期</td><td>大部分生命周期钩子名称上+“on”，功能类似。使用时，Vue3 在组合式 API 中需先引入，而 Vue2 在选项 API 中可直接调用</td><td>整体变化不大，名称上+“on”，功能类似。使用时，Vue3 在组合式 API 中需先引入，而 Vue2 在选项 API 中可直接调用</td></tr><tr><td>多根节点</td><td>不支持，模板中使用多个根节点会报错</td><td>支持，可在模板中使用多个根节点Fragments</td></tr><tr><td>组合式 API</td><td>选项 API，逻辑散乱在文件不同位置，可读性差</td><td>组合式 API，同一逻辑内容可写到一起，增强了可读性、内聚性，提供了较完美的逻辑复用性方案</td></tr><tr><td>异步组件</td><td>不支持</td><td>提供 Suspense 组件，可在等待异步组件加载完成前渲染兜底内容，如 loading，使用户体验更平滑</td></tr><tr><td>Teleport</td><td>不支持</td><td>提供 Teleport 组件，可将部分 DOM 移动到 Vue app 之外的位置</td></tr><tr><td>打包</td><td>webapck把esm打包成es5</td><td>基于 vite 快,开发环境用ESM，无需打包\\生产环境用rollup, 不会快很多</td></tr><tr><td>状态管理</td><td>vuex</td><td>基于 pina</td></tr><tr><td>路由</td><td>this.$router 或 this.$route</td><td>基于 useRoute对象提供的方法</td></tr><tr><td>逻辑复用</td><td>mixin引起命名冲突</td><td>Composition Api，export function useMouse以 use 开头，import { useMouse } from &#39;./mouse.js&#39;</td></tr><tr><td>main.js导入的模块和初始化方面不同,一个是在 Vue 上调用，一个是在 app 实例上调用：</td><td>全局api：Vue.prototype.$axios = axios，app.config.globalProperties.$axios = axios</td><td>import { getCurrentInstance } from &#39;vue&#39; const { proxy } = getCurrentInstance() proxy.$axios.get(&#39;http://...&#39;)</td></tr><tr><td>优势</td><td>js</td><td>性能更好，体积更小，更好的ts支持，更好代码组织，更好的逻辑抽离，更多新功能</td></tr><tr><td>定义变量和方法</td><td>数据放data，通过data()函数定义数据变量，方法定义methods</td><td>setup()函数定义数据变量和方法return一个对象 基础类型ref 引用类型 reactive</td></tr><tr><td>组件通信</td><td>props, $emit</td><td>defineProps，defineEmits接收返回emit，emit(&quot;事件名&quot;, &quot;信息&quot;)</td></tr><tr><td>缓存组件</td><td>KeepAlive 包裹 Component</td><td>结合插槽一起使用,v-slot=&quot;{ Component }&quot;</td></tr><tr><td>this</td><td>this访问当前实例</td><td>proxy或ctx,推荐propxy</td></tr><tr><td>v-model</td><td>v-bind .sync</td><td>v-model</td></tr><tr><td>全局API</td><td>this.$nextTick</td><td>import {nextTick} form &#39;vue&#39; 更好的treeshaking</td></tr><tr><td>teleport api 远程传送</td><td>弹框要在 template下面,才能被渲染</td><td>teleport让组件渲染到外部，把想渲染的内容渲染到非当前节点树下</td></tr></tbody></table><h3 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h3><ul><li>vue2 Options Api</li><li>vue3 Composition Api 更好的代码组织，逻辑复用，类型推导 抽离函数：变量和功能逻辑封装到一个函数，统一放到setup调用，统一返回所有变量 逻辑复用：函数名约定useXxxx,setup中引用useXxxx 类型推导：将函数返回值结构，而不是全局用一个this</li><li>hooks 函数名约定useXxxx setup()作为生命周期只被调用一次，hook函数会被多次调用 hook需要useMemo和useCallback缓存, setup不需要 hooks要保证顺序 hook的useState代替vue3的reactive和ref</li></ul><h3 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">beforeCreate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> created </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">beforeMount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> onBeforeMount</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mounted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> onMounted</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">beforeUpdate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> onBeforeUpdate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">updated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> onUpdated</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">beforeDestroy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> onBeforeUnmount</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">destroyed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> onUnmounted</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="vue2和3源码区别" tabindex="-1">vue2和3源码区别 <a class="header-anchor" href="#vue2和3源码区别" aria-label="Permalink to &quot;vue2和3源码区别&quot;">​</a></h2><h3 id="响应式原理" tabindex="-1">响应式原理 <a class="header-anchor" href="#响应式原理" aria-label="Permalink to &quot;响应式原理&quot;">​</a></h3><p>响应式proxy</p><h3 id="虚拟dom标记" tabindex="-1">虚拟dom标记 <a class="header-anchor" href="#虚拟dom标记" aria-label="Permalink to &quot;虚拟dom标记&quot;">​</a></h3><p>patchflag标记：编译模板，动态节点做标记，并且将节点分成不同类型，TEXT PAROPS, PROPS还要列出对应属性，diff算法区分静态节点以及不同类型的动态节点 2.0没区分节点类型，直接挨着比较 3.0 只比动态节点，静态节点不需要比较</p><p>hoistStatic标记：所有静态节点的定义提升至父作用域缓存，合并多个相邻的静态节点，空间换时间，再次执行render函数的时候就不用重新定义静态节点。达到一定数量后vue3会将静态节点合并</p><p>cacheHandler：缓存事件，vnode编译后有事件函数，将这个事件缓存到数组，后续其他地方再触发直接去缓存找</p><p>ssr优化：静态节点直接输出，绕过vdom, 动态节点还是动态渲染</p><p>tree-shaking：编译时候根据不同情况引入不同API，需要的再import</p><h3 id="diff" tabindex="-1">diff <a class="header-anchor" href="#diff" aria-label="Permalink to &quot;diff&quot;">​</a></h3><p>双指针while循环-&gt;最长递增子序列滑动窗口</p><p>事件缓存：将事件缓存，可以理解为变成静态的了添加静态标记：</p><p>Vue2 是全量 Diff</p><p>Vue3 是静态标记 + 非全量</p><p>Diff静态提升：创建静态节点时保存，后续直接复用使用最长递增子序列优化了对比流程：Vue2 里在 updateChildren() 函数里对比变更，在 Vue3 里这一块的逻辑主要在 patchKeyedChildren() 函数里</p>`,29),n=[d];function r(p,o,l,h,u,c){return e(),s("div",null,n)}const E=t(i,[["render",r]]);export{m as __pageData,E as default};
